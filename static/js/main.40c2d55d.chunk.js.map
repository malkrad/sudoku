{"version":3,"sources":["Cell.js","Subgrid.js","SudokuBoard.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","this","idx","className","immutable","focused","wrongCell","causingError","hint","onClick","num","Component","SubGrid","cellClicked","cell","cells","map","key","String","focusedCell","wrongCells","hints","defaultProps","Array","fill","SudokuBoard","focusedSubgrid","subgrids","subgrid","undefined","solved","Game","state","setFocus","changeCell","clearBoard","solve","makeBoard","handleKeyDown","setState","evt","isNaN","parseInt","handleNumberDown","includes","handleArrowDown","value","checkConflicts","checkSolved","newCells","forEach","subIdx","cellIdx","checkCell","status","toCheck","findWrongCells","length","arrow","moveLeft","moveRight","moveUp","moveDown","Math","floor","block","getBlock","row","getRow","col","getCol","wrongs","filter","x","subgridPos","slice","cellPos","s","concat","_","findWrongCellsInBlock","findWrongCellsInRow","findWrongCellsInCol","cellValue","c","originalCells","solveNext","result","alert","shuffle","nextEmptyCell","solutions","cellSolutions","solution","arr","i","j","random","emptyBoard","console","log","solveAndShuffle","shuffledKeys","keys","immutableCells","findLonelyCells","foundLonelyCells","lonelyCells","findLonelyValues","foundLonelyValues","lonelyValues","hintsFound","countedSolutions","document","addEventListener","removeEventListener","id","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40c2d55d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Cell.css';\r\n\r\nexport class Cell extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\thandleClick() {\r\n\t\tthis.props.handleClick(this.props.idx);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet className = 'Cell';\r\n\t\tif (this.props.immutable) className += ' immutable';\r\n\t\telse className += ' mutable';\r\n\t\tif (this.props.focused) className += ' focused';\r\n\t\tif (this.props.wrongCell) className += ' wrongCell';\r\n\t\tif (this.props.causingError) className += ' causingError';\r\n\t\tif (this.props.hint) className += ' hint';\r\n\t\treturn (\r\n\t\t\t<div className={className} onClick={this.handleClick}>\r\n\t\t\t\t{this.props.num !== 0 ? this.props.num : ''}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport './Subgrid.css';\r\nimport Cell from './Cell';\r\n\r\nexport class SubGrid extends Component {\r\n\tstatic defaultProps = {\r\n\t\tcells: new Array(9).fill(0)\r\n\t};\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.cellClicked = this.cellClicked.bind(this);\r\n\t}\r\n\r\n\tcellClicked(cell) {\r\n\t\tthis.props.handleClick(this.props.idx, cell);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst cells = this.props.cells.map((cell, idx) => (\r\n\t\t\t<Cell\r\n\t\t\t\tidx={idx}\r\n\t\t\t\tkey={String(this.props.idx) + '-' + String(idx)}\r\n\t\t\t\tnum={cell}\r\n\t\t\t\thandleClick={this.cellClicked}\r\n\t\t\t\tfocused={this.props.focusedCell === idx}\r\n\t\t\t\twrongCell={this.props.wrongCells[idx]}\r\n\t\t\t\tcausingError={this.props.causingError[idx]}\r\n\t\t\t\timmutable={this.props.immutable[idx]}\r\n\t\t\t\thint={this.props.hints[idx]}\r\n\t\t\t/>\r\n\t\t));\r\n\t\treturn <div className=\"Subgrid\">{cells}</div>;\r\n\t}\r\n}\r\n\r\nexport default SubGrid;\r\n","import React, { Component } from 'react';\r\nimport Subgrid from './Subgrid';\r\nimport './SudokuBoard.css';\r\n\r\nexport class SudokuBoard extends Component {\r\n\tstatic defaultProps = {\r\n\t\tsubgrids: new Array(9).fill(new Array(9).fill(0))\r\n\t};\r\n\trender() {\r\n\t\tlet focusedSubgrid, focusedCell;\r\n\t\tif (this.props.focusedCell) {\r\n\t\t\t[ focusedSubgrid, focusedCell ] = this.props.focusedCell;\r\n\t\t}\r\n\t\tconst subgrids = this.props.subgrids.map((subgrid, idx) => (\r\n\t\t\t<Subgrid\r\n\t\t\t\tidx={idx}\r\n\t\t\t\tkey={idx}\r\n\t\t\t\tcells={subgrid}\r\n\t\t\t\thandleClick={this.props.handleClick}\r\n\t\t\t\tfocusedCell={focusedSubgrid === idx ? focusedCell : undefined}\r\n\t\t\t\twrongCells={this.props.wrongCells[idx]}\r\n\t\t\t\tcausingError={this.props.causingError[idx]}\r\n\t\t\t\timmutable={this.props.immutable[idx]}\r\n\t\t\t\thints={this.props.hints[idx]}\r\n\t\t\t/>\r\n\t\t));\r\n\t\tlet className = 'SudokuBoard';\r\n\t\tthis.props.solved ? (className += ' solved') : (className += ' unsolved');\r\n\t\treturn <div className={className}>{subgrids}</div>;\r\n\t}\r\n}\r\n\r\nexport default SudokuBoard;\r\n","import React, { Component } from 'react';\r\nimport SudokuBoard from './SudokuBoard';\r\n\r\nexport class Game extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcells: new Array(9).fill(new Array(9).fill(0)),\r\n\t\t\thints: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\timmutable: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\twrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\tcausingError: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\tfocusedCell: undefined,\r\n\t\t\tsolved: false\r\n\t\t};\r\n\t\tthis.setFocus = this.setFocus.bind(this);\r\n\t\tthis.changeCell = this.changeCell.bind(this);\r\n\t\tthis.clearBoard = this.clearBoard.bind(this);\r\n\t\tthis.hint = this.hint.bind(this);\r\n\t\tthis.solve = this.solve.bind(this);\r\n\t\tthis.makeBoard = this.makeBoard.bind(this);\r\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this);\r\n\t}\r\n\r\n\tsetFocus(subgrid, cell) {\r\n\t\tif (!this.state.immutable[subgrid][cell]) {\r\n\t\t\tthis.setState({ focusedCell: [ subgrid, cell ] });\r\n\t\t}\r\n\t}\r\n\r\n\thandleKeyDown(evt) {\r\n\t\t// Both parseInt and isNan are used to avoid Spacebar Key\r\n\t\t// Since it can't be catched by isNan on its own.\r\n\t\tconst key = evt.key;\r\n\t\tconst arrows = [ 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown' ];\r\n\t\tif (this.state.focusedCell && !isNaN(parseInt(key))) {\r\n\t\t\tthis.handleNumberDown(parseInt(evt.key));\r\n\t\t} else if (arrows.includes(key)) {\r\n\t\t\tthis.handleArrowDown(key);\r\n\t\t}\r\n\t}\r\n\r\n\thandleNumberDown(value) {\r\n\t\t// Both parseInt and isNan are used to avoid Spacebar Key\r\n\t\t// Since it can't be catched by isNan on its own.\r\n\t\tthis.changeCell(value, ...this.state.focusedCell);\r\n\t\tthis.checkConflicts(...this.state.focusedCell);\r\n\t\tthis.checkSolved();\r\n\t}\r\n\r\n\tchangeCell(value, subgrid, cell) {\r\n\t\tif (!this.state.immutable[subgrid][cell]) {\r\n\t\t\tlet newCells = this.state.cells;\r\n\t\t\tnewCells[subgrid][cell] = value;\r\n\t\t\tthis.setState({ cells: newCells });\r\n\t\t}\r\n\t}\r\n\r\n\tcheckConflicts() {\r\n\t\tlet { cells } = this.state;\r\n\t\tlet wrongCells = new Array(9).fill(new Array(9).fill(false));\r\n\t\tlet causingError = new Array(9).fill(new Array(9).fill(false));\r\n\t\tcells.forEach((subgrid, subIdx) =>\r\n\t\t\tsubgrid.forEach((cell, cellIdx) => {\r\n\t\t\t\tif (cell !== 0) {\r\n\t\t\t\t\tconst [ status, toCheck ] = this.checkCell(subIdx, cellIdx);\r\n\t\t\t\t\tif (status) {\r\n\t\t\t\t\t\t[ wrongCells, causingError ] = this.findWrongCells(\r\n\t\t\t\t\t\t\tcell,\r\n\t\t\t\t\t\t\tsubIdx,\r\n\t\t\t\t\t\t\tcellIdx,\r\n\t\t\t\t\t\t\ttoCheck,\r\n\t\t\t\t\t\t\twrongCells,\r\n\t\t\t\t\t\t\tcausingError\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\tthis.setState({ wrongCells: wrongCells, causingError: causingError });\r\n\t}\r\n\r\n\tcheckSolved() {\r\n\t\tconst { cells, wrongCells } = this.state;\r\n\t\tlet solved = true;\r\n\t\tfor (let subgrid = 0; subgrid < cells.length; subgrid++) {\r\n\t\t\tfor (let cell = 0; cell < cells[subgrid].length; cell++) {\r\n\t\t\t\tif (!cells[subgrid][cell] || wrongCells[subgrid][cell]) {\r\n\t\t\t\t\tsolved = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (!solved) break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({ solved: solved });\r\n\t}\r\n\r\n\thandleArrowDown(arrow) {\r\n\t\tlet subgrid, cell;\r\n\t\tif (this.state.focusedCell) {\r\n\t\t\t[ subgrid, cell ] = this.state.focusedCell;\r\n\t\t\tswitch (arrow) {\r\n\t\t\t\tcase 'ArrowLeft':\r\n\t\t\t\t\t[ subgrid, cell ] = this.moveLeft(subgrid, cell);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'ArrowRight':\r\n\t\t\t\t\t[ subgrid, cell ] = this.moveRight(subgrid, cell);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'ArrowUp':\r\n\t\t\t\t\t[ subgrid, cell ] = this.moveUp(subgrid, cell);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'ArrowDown':\r\n\t\t\t\t\t[ subgrid, cell ] = this.moveDown(subgrid, cell);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t[ subgrid, cell ] = [ 0, 0 ];\r\n\t\t}\r\n\t\tthis.setState({ focusedCell: [ subgrid, cell ] });\r\n\t}\r\n\r\n\tmoveLeft(subgrid, cell) {\r\n\t\tif (cell % 3 !== 0) {\r\n\t\t\tcell--;\r\n\t\t} else if (subgrid % 3 !== 0) {\r\n\t\t\tcell += 2;\r\n\t\t\tsubgrid--;\r\n\t\t}\r\n\t\treturn [ subgrid, cell ];\r\n\t}\r\n\r\n\tmoveRight(subgrid, cell) {\r\n\t\tif (cell % 3 !== 2) {\r\n\t\t\tcell++;\r\n\t\t} else if (subgrid % 3 !== 2) {\r\n\t\t\tcell -= 2;\r\n\t\t\tsubgrid++;\r\n\t\t}\r\n\t\treturn [ subgrid, cell ];\r\n\t}\r\n\r\n\tmoveUp(subgrid, cell) {\r\n\t\tif (Math.floor(cell / 3) !== 0) {\r\n\t\t\tcell -= 3;\r\n\t\t} else if (Math.floor(subgrid / 3) !== 0) {\r\n\t\t\tcell += 6;\r\n\t\t\tsubgrid -= 3;\r\n\t\t}\r\n\t\treturn [ subgrid, cell ];\r\n\t}\r\n\r\n\tmoveDown(subgrid, cell) {\r\n\t\tif (Math.floor(cell / 3) !== 2) {\r\n\t\t\tcell += 3;\r\n\t\t} else if (Math.floor(subgrid / 3) !== 2) {\r\n\t\t\tcell -= 6;\r\n\t\t\tsubgrid += 3;\r\n\t\t}\r\n\t\treturn [ subgrid, cell ];\r\n\t}\r\n\r\n\tcheckCell(subgrid, cell) {\r\n\t\tconst value = this.state.cells[subgrid][cell];\r\n\t\tconst block = this.getBlock(subgrid, this.state.cells);\r\n\t\tconst row = this.getRow(subgrid, cell, this.state.cells);\r\n\t\tconst col = this.getCol(subgrid, cell, this.state.cells);\r\n\t\tlet wrongs = { block: false, row: false, col: false };\r\n\t\tif (block.filter((x) => x === value).length >= 2) {\r\n\t\t\twrongs.block = true;\r\n\t\t}\r\n\t\tif (row.filter((x) => x === value).length >= 2) {\r\n\t\t\twrongs.row = true;\r\n\t\t}\r\n\t\tif (col.filter((x) => x === value).length >= 2) {\r\n\t\t\twrongs.col = true;\r\n\t\t}\r\n\t\treturn [ wrongs.block || wrongs.row || wrongs.col, wrongs ];\r\n\t}\r\n\r\n\tgetBlock(subgrid, cells) {\r\n\t\treturn cells[subgrid];\r\n\t}\r\n\r\n\tgetRow(subgrid, cell, cells) {\r\n\t\tconst subgridPos = Math.floor(subgrid / 3) * 3;\r\n\t\tconst subgrids = cells.slice(subgridPos, subgridPos + 3);\r\n\t\tconst cellPos = Math.floor(cell / 3) * 3;\r\n\t\tconst row = subgrids.map((s) => s.slice(cellPos, cellPos + 3));\r\n\t\treturn [].concat(...row);\r\n\t}\r\n\r\n\tgetCol(subgrid, cell, cells) {\r\n\t\tconst subgrids = cells.filter((_, idx) => idx % 3 === subgrid % 3);\r\n\t\tconst col = subgrids.map((s) => s.filter((_, idx) => idx % 3 === cell % 3));\r\n\t\treturn [].concat(...col);\r\n\t}\r\n\r\n\tfindWrongCells(value, subgrid, cell, toCheck, wrongCells, causingError) {\r\n\t\tif (toCheck.block) {\r\n\t\t\t[ wrongCells, causingError ] = this.findWrongCellsInBlock(value, subgrid, wrongCells, causingError);\r\n\t\t}\r\n\t\tif (toCheck.row) {\r\n\t\t\t[ wrongCells, causingError ] = this.findWrongCellsInRow(value, subgrid, cell, wrongCells, causingError);\r\n\t\t}\r\n\t\tif (toCheck.col) {\r\n\t\t\t[ wrongCells, causingError ] = this.findWrongCellsInCol(value, subgrid, cell, wrongCells, causingError);\r\n\t\t}\r\n\t\treturn [ wrongCells, causingError ];\r\n\t}\r\n\r\n\tfindWrongCellsInBlock(value, subgrid, wrongCells, causingError) {\r\n\t\twrongCells[subgrid] = new Array(9).fill(true);\r\n\t\tcausingError[subgrid] = causingError[subgrid].map(\r\n\t\t\t(cellValue, idx) => (this.state.cells[subgrid][idx] === value ? true : cellValue)\r\n\t\t);\r\n\t\treturn [ wrongCells, causingError ];\r\n\t}\r\n\r\n\tfindWrongCellsInRow(value, subgrid, cell, wrongCells, causingError) {\r\n\t\twrongCells = wrongCells.map(\r\n\t\t\t(s, idx) =>\r\n\t\t\t\tMath.floor(idx / 3) === Math.floor(subgrid / 3)\r\n\t\t\t\t\t? wrongCells[idx].map((cellValue, idx) => (Math.floor(idx / 3) === Math.floor(cell / 3) ? true : cellValue))\r\n\t\t\t\t\t: s\r\n\t\t);\r\n\t\tcausingError = causingError.map(\r\n\t\t\t(s, subIdx) =>\r\n\t\t\t\tMath.floor(subIdx / 3) === Math.floor(subgrid / 3)\r\n\t\t\t\t\t? causingError[subIdx].map(\r\n\t\t\t\t\t\t\t(cellValue, cellIdx) =>\r\n\t\t\t\t\t\t\t\tMath.floor(cellIdx / 3) === Math.floor(cell / 3) && this.state.cells[subIdx][cellIdx] === value\r\n\t\t\t\t\t\t\t\t\t? true\r\n\t\t\t\t\t\t\t\t\t: cellValue\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t: s\r\n\t\t);\r\n\t\treturn [ wrongCells, causingError ];\r\n\t}\r\n\r\n\tfindWrongCellsInCol(value, subgrid, cell, wrongCells, causingError) {\r\n\t\twrongCells = wrongCells.map(\r\n\t\t\t(s, idx) =>\r\n\t\t\t\tidx % 3 === subgrid % 3 ? wrongCells[idx].map((cellValue, idx) => (idx % 3 === cell % 3 ? true : cellValue)) : s\r\n\t\t);\r\n\t\tcausingError = causingError.map(\r\n\t\t\t(s, subIdx) =>\r\n\t\t\t\tsubIdx % 3 === subgrid % 3\r\n\t\t\t\t\t? causingError[subIdx].map(\r\n\t\t\t\t\t\t\t(cellValue, cellIdx) =>\r\n\t\t\t\t\t\t\t\tcellIdx % 3 === cell % 3 && this.state.cells[subIdx][cellIdx] === value ? true : cellValue\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t: s\r\n\t\t);\r\n\t\treturn [ wrongCells, causingError ];\r\n\t}\r\n\r\n\tclearBoard() {\r\n\t\tthis.setState({\r\n\t\t\tcells: this.state.cells.map((s, subIdx) =>\r\n\t\t\t\ts.map((c, cellIdx) => (this.state.immutable[subIdx][cellIdx] ? c : 0))\r\n\t\t\t),\r\n\t\t\twrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\tcausingError: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\tsolved: false\r\n\t\t});\r\n\t}\r\n\r\n\tsolve() {\r\n\t\tconst originalCells = this.state.cells.map((subgrid, subIdx) =>\r\n\t\t\tsubgrid.map((cell, cellIdx) => (this.state.immutable[subIdx][cellIdx] ? cell : 0))\r\n\t\t);\r\n\t\tconst { result, cells } = this.solveNext(originalCells, false);\r\n\t\tif (result) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsolved: true,\r\n\t\t\t\tcells: cells,\r\n\t\t\t\twrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\t\tcausingError: new Array(9).fill(new Array(9).fill(false))\r\n\t\t\t});\r\n\t\t} else alert('Sorry, but something went wrong!');\r\n\t}\r\n\r\n\tsolveNext(cells, shuffle) {\r\n\t\tconst nextEmptyCell = this.nextEmptyCell(cells);\r\n\t\tif (!nextEmptyCell) return { result: true, cells: cells };\r\n\t\tlet [ subgrid, cell ] = nextEmptyCell;\r\n\t\tlet solutions = this.cellSolutions(subgrid, cell, cells);\r\n\t\tif (!solutions.length) {\r\n\t\t\treturn { result: false, cells: cells };\r\n\t\t}\r\n\t\t// since shuffling costs a lot of time,\r\n\t\t// it should be used only in making puzzles\r\n\t\t// but not in solving them\r\n\t\tsolutions = shuffle ? this.shuffle(solutions) : solutions;\r\n\t\tfor (const solution of solutions) {\r\n\t\t\tcells[subgrid][cell] = solution;\r\n\t\t\tif (this.solveNext(cells).result) return { result: true, cells: cells };\r\n\t\t\tcells[subgrid][cell] = 0;\r\n\t\t}\r\n\t\treturn { result: false, cells: cells };\r\n\t}\r\n\r\n\tnextEmptyCell(cells) {\r\n\t\tfor (let subgrid = 0; subgrid < cells.length; subgrid++) {\r\n\t\t\tfor (let cell = 0; cell < cells[0].length; cell++) {\r\n\t\t\t\tif (cells[subgrid][cell] === 0) return [ subgrid, cell ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tcellSolutions(subgrid, cell, cells) {\r\n\t\tlet solutions = new Array(9).fill(0).map((_, idx) => idx + 1);\r\n\t\tconst block = this.getBlock(subgrid, cells);\r\n\t\tconst row = this.getRow(subgrid, cell, cells);\r\n\t\tconst col = this.getCol(subgrid, cell, cells);\r\n\t\tsolutions = solutions.filter((c) => !block.includes(c) && !row.includes(c) && !col.includes(c));\r\n\t\treturn solutions;\r\n\t}\r\n\r\n\tshuffle(arr) {\r\n\t\tfor (let i = arr.length - 1; i > 0; i--) {\r\n\t\t\tconst j = Math.floor(Math.random() * i);\r\n\t\t\t[ arr[i], arr[j] ] = [ arr[j], arr[i] ];\r\n\t\t}\r\n\t\treturn arr;\r\n\t}\r\n\r\n\tmakeBoard() {\r\n\t\tlet emptyBoard = [\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n\t\t\t[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\r\n\t\t];\r\n\t\tconsole.log(emptyBoard);\r\n\t\tlet { result, cells } = this.solveAndShuffle(emptyBoard);\r\n\t\tif (result) {\r\n\t\t\tlet shuffledKeys = this.shuffle([ ...Array(81).keys() ]);\r\n\t\t\tfor (let key of shuffledKeys) {\r\n\t\t\t\tconst subgrid = Math.floor(key / 9);\r\n\t\t\t\tconst cell = key % 9;\r\n\t\t\t\tconst cellValue = cells[subgrid][cell];\r\n\t\t\t\tcells[subgrid][cell] = 0;\r\n\t\t\t\tconst solutions = this.cellSolutions(subgrid, cell, cells);\r\n\t\t\t\tif (solutions.length !== 1 && solutions.length !== 2) {\r\n\t\t\t\t\tcells[subgrid][cell] = cellValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst immutable = this.immutableCells(cells);\r\n\t\t\tthis.setState({\r\n\t\t\t\tcells: cells,\r\n\t\t\t\timmutable: immutable,\r\n\t\t\t\twrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\t\tcausingError: new Array(9).fill(new Array(9).fill(false)),\r\n\t\t\t\tsolved: false\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\talert('Something wrong happend while trying to make a board!');\r\n\t\t}\r\n\t}\r\n\r\n\tsolveAndShuffle(cells) {\r\n\t\treturn this.solveNext(cells, true);\r\n\t}\r\n\r\n\timmutableCells(cells) {\r\n\t\treturn cells.map((subgrid, subIdx) => subgrid.map((cell, cellIdx) => (cell ? true : false)));\r\n\t}\r\n\r\n\thint() {\r\n\t\tconst [ foundLonelyCells, lonelyCells ] = this.findLonelyCells();\r\n\t\tconst [ foundLonelyValues, lonelyValues ] = this.findLonelyValues();\r\n\t\tlet hints = new Array(9).fill(new Array(9).fill(false));\r\n\t\thints = hints.map((subgrid, subIdx) =>\r\n\t\t\tsubgrid.map((cell, cellIdx) => lonelyCells[subIdx][cellIdx] || lonelyValues[subIdx][cellIdx])\r\n\t\t);\r\n\t\tif (foundLonelyCells || foundLonelyValues) {\r\n\t\t\tthis.setState({ hints: hints });\r\n\t\t} else {\r\n\t\t\talert('No direct solutions');\r\n\t\t}\r\n\t}\r\n\r\n\t// Cells that can only fit one value\r\n\t// according to the current values of the grid\r\n\tfindLonelyCells() {\r\n\t\tconst { cells, immutable, hints } = this.state;\r\n\t\tlet hintsFound = false;\r\n\t\tlet solution = cells.map((subgrid, subIdx) =>\r\n\t\t\tsubgrid.map((cell, cellIdx) => (!immutable[subIdx][cellIdx] ? this.cellSolutions(subIdx, cellIdx, cells) : []))\r\n\t\t);\r\n\t\tfor (let subgrid = 0; subgrid < solution.length; subgrid++) {\r\n\t\t\tfor (let cell = 0; cell < solution[subgrid].length; cell++) {\r\n\t\t\t\tif (solution[subgrid][cell].length === 1) {\r\n\t\t\t\t\thints[subgrid][cell] = true;\r\n\t\t\t\t\thintsFound = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [ hintsFound, hints ];\r\n\t}\r\n\r\n\t// Values that can be fit in one place in a block, row or col\r\n\t// according to the current values of the grid\r\n\tfindLonelyValues() {\r\n\t\tconst { cells, immutable, hints } = this.state;\r\n\t\tlet hintsFound = false;\r\n\t\tlet solution = cells.map((subgrid, subIdx) =>\r\n\t\t\tsubgrid.map((cell, cellIdx) => (!immutable[subIdx][cellIdx] ? this.cellSolutions(subIdx, cellIdx, cells) : []))\r\n\t\t);\r\n\t\tlet countedSolutions = new Array(9).fill(new Array(9).fill(0));\r\n\t\tsolution.forEach((subgrid, subIdx) => subgrid.forEach((cell, cellIdx) => (countedSolutions[subIdx][cell] += 1)));\r\n\t\t// TODO: find lonely values logic\r\n\t\treturn [ hintsFound, hints ];\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.makeBoard();\r\n\t\tdocument.addEventListener('keydown', this.handleKeyDown);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tdocument.removeEventListener('keydown', this.handleKeyDown);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<header>\r\n\t\t\t\t\t<h1 id=\"title\">Sudoku JS</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<SudokuBoard\r\n\t\t\t\t\tsubgrids={this.state.cells}\r\n\t\t\t\t\thandleClick={this.setFocus}\r\n\t\t\t\t\tfocusedCell={this.state.focusedCell}\r\n\t\t\t\t\twrongCells={this.state.wrongCells}\r\n\t\t\t\t\tcausingError={this.state.causingError}\r\n\t\t\t\t\timmutable={this.state.immutable}\r\n\t\t\t\t\thints={this.state.hints}\r\n\t\t\t\t\tsolved={this.state.solved}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"HelperButtonsContainer\">\r\n\t\t\t\t\t<button className=\"HelperButton\" onClick={this.makeBoard}>\r\n\t\t\t\t\t\tNew\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"HelperButton\" onClick={this.clearBoard}>\r\n\t\t\t\t\t\tClear\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t{/* <button className=\"HelperButton\" onClick={this.hint}>\r\n\t\t\t\t\t\tHint\r\n\t\t\t\t\t</button> */}\r\n\t\t\t\t\t<button className=\"HelperButton\" onClick={this.solve}>\r\n\t\t\t\t\t\tSolve!\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Game />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}