{"version":3,"sources":["Cell.js","Subgrid.js","SudokuBoard.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","this","idx","className","immutable","focused","wrongCell","causingError","hint","onClick","num","Component","SubGrid","cellClicked","cell","cells","map","key","String","focusedCell","wrongCells","hints","defaultProps","Array","fill","SudokuBoard","focusedSubgrid","subgrids","subgrid","undefined","solved","Game","state","setFocus","changeCell","clearBoard","solve","makeBoard","handleKeyDown","setState","evt","isNaN","parseInt","handleNumberDown","includes","handleArrowDown","value","checkConflicts","checkSolved","newCells","forEach","subIdx","cellIdx","checkCell","status","toCheck","findWrongCells","length","arrow","moveLeft","moveRight","moveUp","moveDown","Math","floor","block","getBlock","row","getRow","col","getCol","wrongs","filter","x","subgridPos","slice","cellPos","s","concat","_","findWrongCellsInBlock","findWrongCellsInRow","findWrongCellsInCol","cellValue","c","originalCells","solveNext","result","alert","shuffle","nextEmptyCell","solutions","cellSolutions","solution","arr","i","j","random","solveAndShuffle","shuffledKeys","keys","immutableCells","findLonelyCells","foundLonelyCells","lonelyCells","findLonelyValues","foundLonelyValues","lonelyValues","hintsFound","countedSolutions","document","addEventListener","removeEventListener","id","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff7f8c74.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Cell.css';\r\n\r\nexport class Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.handleClick(this.props.idx);\r\n  }\r\n\r\n  render() {\r\n    let className = 'Cell';\r\n    if (this.props.immutable) className += ' immutable';\r\n    else className += ' mutable';\r\n    if (this.props.focused) className += ' focused';\r\n    if (this.props.wrongCell) className += ' wrongCell';\r\n    if (this.props.causingError) className += ' causingError';\r\n    if (this.props.hint) className += ' hint';\r\n    return (\r\n      <div className={className} onClick={this.handleClick}>\r\n        {this.props.num !== 0 ? this.props.num : ''}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport './Subgrid.css';\r\nimport Cell from './Cell';\r\n\r\nexport class SubGrid extends Component {\r\n  static defaultProps = {\r\n    cells: new Array(9).fill(0)\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.cellClicked = this.cellClicked.bind(this);\r\n  }\r\n\r\n  cellClicked(cell) {\r\n    this.props.handleClick(this.props.idx, cell);\r\n  }\r\n\r\n  render() {\r\n    const cells = this.props.cells.map((cell, idx) => (\r\n      <Cell\r\n        idx={idx}\r\n        key={String(this.props.idx) + '-' + String(idx)}\r\n        num={cell}\r\n        handleClick={this.cellClicked}\r\n        focused={this.props.focusedCell === idx}\r\n        wrongCell={this.props.wrongCells[idx]}\r\n        causingError={this.props.causingError[idx]}\r\n        immutable={this.props.immutable[idx]}\r\n        hint={this.props.hints[idx]}\r\n      />\r\n    ));\r\n    return <div className=\"Subgrid\">{cells}</div>;\r\n  }\r\n}\r\n\r\nexport default SubGrid;\r\n","import React, { Component } from 'react';\r\nimport Subgrid from './Subgrid';\r\nimport './SudokuBoard.css';\r\n\r\nexport class SudokuBoard extends Component {\r\n  static defaultProps = {\r\n    subgrids: new Array(9).fill(new Array(9).fill(0))\r\n  };\r\n  render() {\r\n    let focusedSubgrid, focusedCell;\r\n    if (this.props.focusedCell) {\r\n      [ focusedSubgrid, focusedCell ] = this.props.focusedCell;\r\n    }\r\n    const subgrids = this.props.subgrids.map((subgrid, idx) => (\r\n      <Subgrid\r\n        idx={idx}\r\n        key={idx}\r\n        cells={subgrid}\r\n        handleClick={this.props.handleClick}\r\n        focusedCell={focusedSubgrid === idx ? focusedCell : undefined}\r\n        wrongCells={this.props.wrongCells[idx]}\r\n        causingError={this.props.causingError[idx]}\r\n        immutable={this.props.immutable[idx]}\r\n        hints={this.props.hints[idx]}\r\n      />\r\n    ));\r\n    let className = 'SudokuBoard';\r\n    this.props.solved ? (className += ' solved') : (className += ' unsolved');\r\n    return <div className={className}>{subgrids}</div>;\r\n  }\r\n}\r\n\r\nexport default SudokuBoard;\r\n","import React, { Component } from 'react';\r\nimport SudokuBoard from './SudokuBoard';\r\n\r\nexport class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: new Array(9).fill(new Array(9).fill(0)),\r\n      hints: new Array(9).fill(new Array(9).fill(false)),\r\n      immutable: new Array(9).fill(new Array(9).fill(false)),\r\n      wrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n      causingError: new Array(9).fill(new Array(9).fill(false)),\r\n      focusedCell: undefined,\r\n      solved: false\r\n    };\r\n    this.setFocus = this.setFocus.bind(this);\r\n    this.changeCell = this.changeCell.bind(this);\r\n    this.clearBoard = this.clearBoard.bind(this);\r\n    this.hint = this.hint.bind(this);\r\n    this.solve = this.solve.bind(this);\r\n    this.makeBoard = this.makeBoard.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n  }\r\n\r\n  setFocus(subgrid, cell) {\r\n    if (!this.state.immutable[subgrid][cell]) {\r\n      this.setState({ focusedCell: [ subgrid, cell ] });\r\n    }\r\n  }\r\n\r\n  handleKeyDown(evt) {\r\n    // Both parseInt and isNan are used to avoid Spacebar Key\r\n    // Since it can't be catched by isNan on its own.\r\n    const key = evt.key;\r\n    const arrows = [ 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown' ];\r\n    if (this.state.focusedCell && !isNaN(parseInt(key))) {\r\n      this.handleNumberDown(parseInt(evt.key));\r\n    } else if (arrows.includes(key)) {\r\n      this.handleArrowDown(key);\r\n    }\r\n  }\r\n\r\n  handleNumberDown(value) {\r\n    // Both parseInt and isNan are used to avoid Spacebar Key\r\n    // Since it can't be catched by isNan on its own.\r\n    this.changeCell(value, ...this.state.focusedCell);\r\n    this.checkConflicts(...this.state.focusedCell);\r\n    this.checkSolved();\r\n  }\r\n\r\n  changeCell(value, subgrid, cell) {\r\n    if (!this.state.immutable[subgrid][cell]) {\r\n      let newCells = this.state.cells;\r\n      newCells[subgrid][cell] = value;\r\n      this.setState({ cells: newCells });\r\n    }\r\n  }\r\n\r\n  checkConflicts() {\r\n    let { cells } = this.state;\r\n    let wrongCells = new Array(9).fill(new Array(9).fill(false));\r\n    let causingError = new Array(9).fill(new Array(9).fill(false));\r\n    cells.forEach((subgrid, subIdx) =>\r\n      subgrid.forEach((cell, cellIdx) => {\r\n        if (cell !== 0) {\r\n          const [ status, toCheck ] = this.checkCell(subIdx, cellIdx);\r\n          if (status) {\r\n            [ wrongCells, causingError ] = this.findWrongCells(\r\n              cell,\r\n              subIdx,\r\n              cellIdx,\r\n              toCheck,\r\n              wrongCells,\r\n              causingError\r\n            );\r\n          }\r\n        }\r\n      })\r\n    );\r\n    this.setState({ wrongCells: wrongCells, causingError: causingError });\r\n  }\r\n\r\n  checkSolved() {\r\n    const { cells, wrongCells } = this.state;\r\n    let solved = true;\r\n    for (let subgrid = 0; subgrid < cells.length; subgrid++) {\r\n      for (let cell = 0; cell < cells[subgrid].length; cell++) {\r\n        if (!cells[subgrid][cell] || wrongCells[subgrid][cell]) {\r\n          solved = false;\r\n          break;\r\n        }\r\n        if (!solved) break;\r\n      }\r\n    }\r\n    this.setState({ solved: solved });\r\n  }\r\n\r\n  handleArrowDown(arrow) {\r\n    let subgrid, cell;\r\n    if (this.state.focusedCell) {\r\n      [ subgrid, cell ] = this.state.focusedCell;\r\n      switch (arrow) {\r\n        case 'ArrowLeft':\r\n          [ subgrid, cell ] = this.moveLeft(subgrid, cell);\r\n          break;\r\n        case 'ArrowRight':\r\n          [ subgrid, cell ] = this.moveRight(subgrid, cell);\r\n          break;\r\n        case 'ArrowUp':\r\n          [ subgrid, cell ] = this.moveUp(subgrid, cell);\r\n          break;\r\n        case 'ArrowDown':\r\n          [ subgrid, cell ] = this.moveDown(subgrid, cell);\r\n          break;\r\n        default:\r\n      }\r\n    } else {\r\n      [ subgrid, cell ] = [ 0, 0 ];\r\n    }\r\n    this.setState({ focusedCell: [ subgrid, cell ] });\r\n  }\r\n\r\n  moveLeft(subgrid, cell) {\r\n    if (cell % 3 !== 0) {\r\n      cell--;\r\n    } else if (subgrid % 3 !== 0) {\r\n      cell += 2;\r\n      subgrid--;\r\n    }\r\n    return [ subgrid, cell ];\r\n  }\r\n\r\n  moveRight(subgrid, cell) {\r\n    if (cell % 3 !== 2) {\r\n      cell++;\r\n    } else if (subgrid % 3 !== 2) {\r\n      cell -= 2;\r\n      subgrid++;\r\n    }\r\n    return [ subgrid, cell ];\r\n  }\r\n\r\n  moveUp(subgrid, cell) {\r\n    if (Math.floor(cell / 3) !== 0) {\r\n      cell -= 3;\r\n    } else if (Math.floor(subgrid / 3) !== 0) {\r\n      cell += 6;\r\n      subgrid -= 3;\r\n    }\r\n    return [ subgrid, cell ];\r\n  }\r\n\r\n  moveDown(subgrid, cell) {\r\n    if (Math.floor(cell / 3) !== 2) {\r\n      cell += 3;\r\n    } else if (Math.floor(subgrid / 3) !== 2) {\r\n      cell -= 6;\r\n      subgrid += 3;\r\n    }\r\n    return [ subgrid, cell ];\r\n  }\r\n\r\n  checkCell(subgrid, cell) {\r\n    const value = this.state.cells[subgrid][cell];\r\n    const block = this.getBlock(subgrid, this.state.cells);\r\n    const row = this.getRow(subgrid, cell, this.state.cells);\r\n    const col = this.getCol(subgrid, cell, this.state.cells);\r\n    let wrongs = { block: false, row: false, col: false };\r\n    if (block.filter((x) => x === value).length >= 2) {\r\n      wrongs.block = true;\r\n    }\r\n    if (row.filter((x) => x === value).length >= 2) {\r\n      wrongs.row = true;\r\n    }\r\n    if (col.filter((x) => x === value).length >= 2) {\r\n      wrongs.col = true;\r\n    }\r\n    return [ wrongs.block || wrongs.row || wrongs.col, wrongs ];\r\n  }\r\n\r\n  getBlock(subgrid, cells) {\r\n    return cells[subgrid];\r\n  }\r\n\r\n  getRow(subgrid, cell, cells) {\r\n    const subgridPos = Math.floor(subgrid / 3) * 3;\r\n    const subgrids = cells.slice(subgridPos, subgridPos + 3);\r\n    const cellPos = Math.floor(cell / 3) * 3;\r\n    const row = subgrids.map((s) => s.slice(cellPos, cellPos + 3));\r\n    return [].concat(...row);\r\n  }\r\n\r\n  getCol(subgrid, cell, cells) {\r\n    const subgrids = cells.filter((_, idx) => idx % 3 === subgrid % 3);\r\n    const col = subgrids.map((s) => s.filter((_, idx) => idx % 3 === cell % 3));\r\n    return [].concat(...col);\r\n  }\r\n\r\n  findWrongCells(value, subgrid, cell, toCheck, wrongCells, causingError) {\r\n    if (toCheck.block) {\r\n      [ wrongCells, causingError ] = this.findWrongCellsInBlock(value, subgrid, wrongCells, causingError);\r\n    }\r\n    if (toCheck.row) {\r\n      [ wrongCells, causingError ] = this.findWrongCellsInRow(value, subgrid, cell, wrongCells, causingError);\r\n    }\r\n    if (toCheck.col) {\r\n      [ wrongCells, causingError ] = this.findWrongCellsInCol(value, subgrid, cell, wrongCells, causingError);\r\n    }\r\n    return [ wrongCells, causingError ];\r\n  }\r\n\r\n  findWrongCellsInBlock(value, subgrid, wrongCells, causingError) {\r\n    wrongCells[subgrid] = new Array(9).fill(true);\r\n    causingError[subgrid] = causingError[subgrid].map(\r\n      (cellValue, idx) => (this.state.cells[subgrid][idx] === value ? true : cellValue)\r\n    );\r\n    return [ wrongCells, causingError ];\r\n  }\r\n\r\n  findWrongCellsInRow(value, subgrid, cell, wrongCells, causingError) {\r\n    wrongCells = wrongCells.map(\r\n      (s, idx) =>\r\n        Math.floor(idx / 3) === Math.floor(subgrid / 3)\r\n          ? wrongCells[idx].map((cellValue, idx) => (Math.floor(idx / 3) === Math.floor(cell / 3) ? true : cellValue))\r\n          : s\r\n    );\r\n    causingError = causingError.map(\r\n      (s, subIdx) =>\r\n        Math.floor(subIdx / 3) === Math.floor(subgrid / 3)\r\n          ? causingError[subIdx].map(\r\n              (cellValue, cellIdx) =>\r\n                Math.floor(cellIdx / 3) === Math.floor(cell / 3) && this.state.cells[subIdx][cellIdx] === value\r\n                  ? true\r\n                  : cellValue\r\n            )\r\n          : s\r\n    );\r\n    return [ wrongCells, causingError ];\r\n  }\r\n\r\n  findWrongCellsInCol(value, subgrid, cell, wrongCells, causingError) {\r\n    wrongCells = wrongCells.map(\r\n      (s, idx) =>\r\n        idx % 3 === subgrid % 3 ? wrongCells[idx].map((cellValue, idx) => (idx % 3 === cell % 3 ? true : cellValue)) : s\r\n    );\r\n    causingError = causingError.map(\r\n      (s, subIdx) =>\r\n        subIdx % 3 === subgrid % 3\r\n          ? causingError[subIdx].map(\r\n              (cellValue, cellIdx) =>\r\n                cellIdx % 3 === cell % 3 && this.state.cells[subIdx][cellIdx] === value ? true : cellValue\r\n            )\r\n          : s\r\n    );\r\n    return [ wrongCells, causingError ];\r\n  }\r\n\r\n  clearBoard() {\r\n    this.setState({\r\n      cells: this.state.cells.map((s, subIdx) =>\r\n        s.map((c, cellIdx) => (this.state.immutable[subIdx][cellIdx] ? c : 0))\r\n      ),\r\n      wrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n      causingError: new Array(9).fill(new Array(9).fill(false)),\r\n      solved: false\r\n    });\r\n  }\r\n\r\n  solve() {\r\n    const originalCells = this.state.cells.map((subgrid, subIdx) =>\r\n      subgrid.map((cell, cellIdx) => (this.state.immutable[subIdx][cellIdx] ? cell : 0))\r\n    );\r\n    const { result, cells } = this.solveNext(originalCells, false);\r\n    if (result) {\r\n      this.setState({\r\n        solved: true,\r\n        cells: cells,\r\n        wrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n        causingError: new Array(9).fill(new Array(9).fill(false))\r\n      });\r\n    } else alert('Sorry, but something went wrong!');\r\n  }\r\n\r\n  solveNext(cells, shuffle) {\r\n    const nextEmptyCell = this.nextEmptyCell(cells);\r\n    if (!nextEmptyCell) return { result: true, cells: cells };\r\n    let [ subgrid, cell ] = nextEmptyCell;\r\n    let solutions = this.cellSolutions(subgrid, cell, cells);\r\n    if (!solutions.length) {\r\n      return { result: false, cells: cells };\r\n    }\r\n    // since shuffling costs a lot of time,\r\n    // it should be used only in making puzzles\r\n    // but not in solving them\r\n    solutions = shuffle ? this.shuffle(solutions) : solutions;\r\n    for (const solution of solutions) {\r\n      cells[subgrid][cell] = solution;\r\n      if (this.solveNext(cells).result) return { result: true, cells: cells };\r\n      cells[subgrid][cell] = 0;\r\n    }\r\n    return { result: false, cells: cells };\r\n  }\r\n\r\n  nextEmptyCell(cells) {\r\n    for (let subgrid = 0; subgrid < cells.length; subgrid++) {\r\n      for (let cell = 0; cell < cells[0].length; cell++) {\r\n        if (cells[subgrid][cell] === 0) return [ subgrid, cell ];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  cellSolutions(subgrid, cell, cells) {\r\n    let solutions = new Array(9).fill(0).map((_, idx) => idx + 1);\r\n    const block = this.getBlock(subgrid, cells);\r\n    const row = this.getRow(subgrid, cell, cells);\r\n    const col = this.getCol(subgrid, cell, cells);\r\n    solutions = solutions.filter((c) => !block.includes(c) && !row.includes(c) && !col.includes(c));\r\n    return solutions;\r\n  }\r\n\r\n  shuffle(arr) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      [ arr[i], arr[j] ] = [ arr[j], arr[i] ];\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  makeBoard() {\r\n    let emptyBoard = [\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\r\n      [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\r\n    ];\r\n    let { result, cells } = this.solveAndShuffle(emptyBoard);\r\n    if (result) {\r\n      let shuffledKeys = this.shuffle([ ...Array(81).keys() ]);\r\n      for (let key of shuffledKeys) {\r\n        const subgrid = Math.floor(key / 9);\r\n        const cell = key % 9;\r\n        const cellValue = cells[subgrid][cell];\r\n        cells[subgrid][cell] = 0;\r\n        const solutions = this.cellSolutions(subgrid, cell, cells);\r\n        if (solutions.length !== 1 && solutions.length !== 2) {\r\n          cells[subgrid][cell] = cellValue;\r\n        }\r\n      }\r\n      const immutable = this.immutableCells(cells);\r\n      this.setState({\r\n        cells: cells,\r\n        immutable: immutable,\r\n        wrongCells: new Array(9).fill(new Array(9).fill(false)),\r\n        causingError: new Array(9).fill(new Array(9).fill(false)),\r\n        solved: false\r\n      });\r\n    } else {\r\n      alert('Something wrong happend while trying to make a board!');\r\n    }\r\n  }\r\n\r\n  solveAndShuffle(cells) {\r\n    return this.solveNext(cells, true);\r\n  }\r\n\r\n  immutableCells(cells) {\r\n    return cells.map((subgrid, subIdx) => subgrid.map((cell, cellIdx) => (cell ? true : false)));\r\n  }\r\n\r\n  hint() {\r\n    const [ foundLonelyCells, lonelyCells ] = this.findLonelyCells();\r\n    const [ foundLonelyValues, lonelyValues ] = this.findLonelyValues();\r\n    let hints = new Array(9).fill(new Array(9).fill(false));\r\n    hints = hints.map((subgrid, subIdx) =>\r\n      subgrid.map((cell, cellIdx) => lonelyCells[subIdx][cellIdx] || lonelyValues[subIdx][cellIdx])\r\n    );\r\n    if (foundLonelyCells || foundLonelyValues) {\r\n      this.setState({ hints: hints });\r\n    } else {\r\n      alert('No direct solutions');\r\n    }\r\n  }\r\n\r\n  // Cells that can only fit one value\r\n  // according to the current values of the grid\r\n  findLonelyCells() {\r\n    const { cells, immutable, hints } = this.state;\r\n    let hintsFound = false;\r\n    let solution = cells.map((subgrid, subIdx) =>\r\n      subgrid.map((cell, cellIdx) => (!immutable[subIdx][cellIdx] ? this.cellSolutions(subIdx, cellIdx, cells) : []))\r\n    );\r\n    for (let subgrid = 0; subgrid < solution.length; subgrid++) {\r\n      for (let cell = 0; cell < solution[subgrid].length; cell++) {\r\n        if (solution[subgrid][cell].length === 1) {\r\n          hints[subgrid][cell] = true;\r\n          hintsFound = true;\r\n        }\r\n      }\r\n    }\r\n    return [ hintsFound, hints ];\r\n  }\r\n\r\n  // Values that can be fit in one place in a block, row or col\r\n  // according to the current values of the grid\r\n  findLonelyValues() {\r\n    const { cells, immutable, hints } = this.state;\r\n    let hintsFound = false;\r\n    let solution = cells.map((subgrid, subIdx) =>\r\n      subgrid.map((cell, cellIdx) => (!immutable[subIdx][cellIdx] ? this.cellSolutions(subIdx, cellIdx, cells) : []))\r\n    );\r\n    let countedSolutions = new Array(9).fill(new Array(9).fill(0));\r\n    solution.forEach((subgrid, subIdx) => subgrid.forEach((cell, cellIdx) => (countedSolutions[subIdx][cell] += 1)));\r\n    // TODO: find lonely values logic\r\n    return [ hintsFound, hints ];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.makeBoard();\r\n    document.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 id=\"title\">Sudoku JS</h1>\r\n        </header>\r\n        <SudokuBoard\r\n          subgrids={this.state.cells}\r\n          handleClick={this.setFocus}\r\n          focusedCell={this.state.focusedCell}\r\n          wrongCells={this.state.wrongCells}\r\n          causingError={this.state.causingError}\r\n          immutable={this.state.immutable}\r\n          hints={this.state.hints}\r\n          solved={this.state.solved}\r\n        />\r\n        <div className=\"HelperButtonsContainer\">\r\n          <button className=\"HelperButton\" onClick={this.makeBoard}>\r\n            New\r\n          </button>\r\n          <button className=\"HelperButton\" onClick={this.clearBoard}>\r\n            Clear\r\n          </button>\r\n          {/* <button className=\"HelperButton\" onClick={this.hint}>\r\n\t\t\t\t\t\tHint\r\n\t\t\t\t\t</button> */}\r\n          <button className=\"HelperButton\" onClick={this.solve}>\r\n            Solve!\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}